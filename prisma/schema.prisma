generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id             String     @id @default(cuid())
  name           String     @unique
  slug           String?    @unique
  description    String?
  logoUrl        String?
  bannerUrl      String?
  contactEmail   String?
  contactPhone   String?
  socialMedia    Json?
  themeConfig    Json?
  isPublic       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  cashBalanceSRD Float      @default(0)
  cashBalanceUSD Float      @default(0)
  stockValueSRD  Float      @default(0)
  stockValueUSD  Float      @default(0)
  
  // Ecommerce Fields
  businessHours       Json?      // { monday: "9AM-5PM", tuesday: "9AM-5PM", ... }
  whatsappBusinessId  String?
  whatsappGreeting    String?    @db.Text
  
  // Content & Policies
  aboutUs             String?    @db.Text
  shippingPolicy      String?    @db.Text
  returnPolicy        String?    @db.Text
  warrantyInfo        String?    @db.Text
  termsOfService      String?    @db.Text
  privacyPolicy       String?    @db.Text
  
  // Marketing & SEO
  heroTitle           String?
  heroSubtitle        String?
  metaDescription     String?
  metaKeywords        String[]   @default([])
  
  expenses       Expense[]
  items          Item[]
  locations      Location[]
  users          User[]
  reviews        Review[]
  faqs           FAQ[]
  banners        Banner[]
  testimonials   Testimonial[]
  categories     Category[]
  newsletterSubscribers NewsletterSubscriber[]

  @@map("companies")
}

model User {
  id           String       @id @default(cuid())
  name         String
  email        String       @unique
  role         UserRole     @default(STAFF)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  companyId    String?
  password     String
  expenses     Expense[]
  items        Item[]       @relation("ItemToUser")
  locations    Location[]
  stockBatches StockBatch[] @relation("BatchToUser")
  company      Company?     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Location {
  id           String       @id @default(cuid())
  name         String
  address      String?
  description  String?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  companyId    String
  managerId    String?
  items        Item[]       @relation("ItemToLocation")
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  manager      User?        @relation(fields: [managerId], references: [id])
  stockBatches StockBatch[] @relation("BatchToLocation")

  @@map("locations")
}

model Expense {
  id          String          @id @default(cuid())
  description String
  amount      Float
  currency    Currency        @default(SRD)
  category    ExpenseCategory @default(MISCELLANEOUS)
  date        DateTime        @default(now())
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  companyId   String
  createdById String?
  company     Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy   User?           @relation(fields: [createdById], references: [id])

  @@map("expenses")
}

model Item {
  id                  String       @id @default(cuid())
  name                String
  slug                String?
  description         String?
  shortDescription    String?
  youtubeReviewUrls   String[]     @default([])
  specifications      Json?
  tags                String[]     @default([])
  isFeatured          Boolean      @default(false)
  isPublic            Boolean      @default(true)
  seoTitle            String?
  seoDescription      String?
  status              Status?      @default(ToOrder)
  quantityInStock     Int?         @default(0)
  costPerUnitUSD      Float
  freightCostUSD      Float?       @default(0)
  sellingPriceSRD     Float
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  companyId           String
  assignedUserId      String?
  locationId          String?
  notes               String?
  expectedArrival     DateTime?
  minStockLevel       Int?
  orderDate           DateTime?
  orderNumber         String?
  profitMarginPercent Float?
  supplier            String?
  supplierSku         String?
  useBatchSystem      Boolean      @default(true)
  imageUrls           String[]     @default([])
  assignedUser        User?        @relation("ItemToUser", fields: [assignedUserId], references: [id])
  company             Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location            Location?    @relation("ItemToLocation", fields: [locationId], references: [id])
  batches             StockBatch[] @relation("ItemBatches")
  reviews             Review[]
  categories          Category[]   @relation("ItemCategories")

  @@map("items")
}

model StockBatch {
  id               String    @id @default(cuid())
  quantity         Int       @default(0)
  originalQuantity Int       @default(0)
  status           Status    @default(ToOrder)
  costPerUnitUSD   Float
  freightCostUSD   Float     @default(0)
  orderDate        DateTime?
  expectedArrival  DateTime?
  orderNumber      String?
  arrivedDate      DateTime?
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  itemId           String
  locationId       String?
  assignedUserId   String?
  imageUrls        String[]  @default([])
  assignedUser     User?     @relation("BatchToUser", fields: [assignedUserId], references: [id])
  item             Item      @relation("ItemBatches", fields: [itemId], references: [id], onDelete: Cascade)
  location         Location? @relation("BatchToLocation", fields: [locationId], references: [id])

  @@map("stock_batches")
}

// ============================================
// ECOMMERCE MODELS
// ============================================

model Review {
  id            String   @id @default(cuid())
  rating        Int      // 1-5 stars
  title         String?
  comment       String?  @db.Text
  reviewerName  String
  reviewerEmail String?
  isVerified    Boolean  @default(false)
  isPublic      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  itemId        String
  companyId     String
  item          Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}

model FAQ {
  id          String   @id @default(cuid())
  question    String
  answer      String   @db.Text
  category    String?  // "Shipping", "Returns", "Products", "General"
  order       Int      @default(0)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("faqs")
}

model Banner {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  imageUrl    String?
  linkUrl     String?
  linkText    String?
  position    String    @default("hero") // "hero", "sidebar", "footer", "popup"
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("banners")
}

model Testimonial {
  id          String   @id @default(cuid())
  name        String
  role        String?  // "Happy Customer", "Business Owner", etc.
  content     String   @db.Text
  imageUrl    String?
  rating      Int?     // 1-5 stars
  isPublic    Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("testimonials")
}

model Category {
  id              String     @id @default(cuid())
  name            String
  slug            String     @unique
  description     String?    @db.Text
  imageUrl        String?
  parentId        String?
  order           Int        @default(0)
  isPublic        Boolean    @default(true)
  metaTitle       String?
  metaDescription String?    @db.Text
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  items       Item[]     @relation("ItemCategories")
  
  @@map("categories")
}

model NewsletterSubscriber {
  id          String   @id @default(cuid())
  email       String
  name        String?
  isActive    Boolean  @default(true)
  source      String?  // "homepage", "footer", "popup", etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([email, companyId])
  @@map("newsletter_subscribers")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

enum Status {
  ToOrder
  Ordered
  Arrived
  Sold
}

enum ExpenseCategory {
  DINNER
  OFFICE_SUPPLIES
  MARKETING
  TRANSPORTATION
  UTILITIES
  RENT
  MAINTENANCE
  MISCELLANEOUS
  INCOME
}

enum Currency {
  SRD
  USD
}
