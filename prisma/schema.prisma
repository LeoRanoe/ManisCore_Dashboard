// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Represents a company or business entity
model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Financial tracking
  cashBalanceSRD Float @default(0) // Cash balance in SRD
  cashBalanceUSD Float @default(0) // Cash balance in USD
  stockValueSRD  Float @default(0) // Value of stock in SRD
  stockValueUSD  Float @default(0) // Value of stock in USD
  
  items     Item[]     // A company can have many items
  users     User[]     // A company can have many users
  locations Location[] // A company can have many locations
  expenses  Expense[]  // A company can have many expenses

  @@map("companies")
}

// Represents a user who manages inventory
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String   // Hashed password for authentication
  role      UserRole @default(STAFF)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // OLD system relations (preserved for backward compatibility)
  items        Item[]       @relation("ItemToUser")
  
  // Shared relations
  locations    Location[]   // Locations managed by this user
  expenses     Expense[]    // Expenses created by this user
  
  // NEW system relations
  stockBatches StockBatch[] @relation("BatchToUser")

  @@map("users")
}

// Represents a physical location where stock is stored
model Location {
  id          String   @id @default(cuid())
  name        String   // e.g., "Aryan's Storage", "Leonardo's Warehouse"
  address     String?  // Optional physical address
  description String?  // Optional description
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  managerId String?
  manager   User? @relation(fields: [managerId], references: [id], onDelete: SetNull)
  
  // OLD system relations (preserved for backward compatibility)
  items        Item[]       @relation("ItemToLocation")
  
  // NEW system relations
  stockBatches StockBatch[] @relation("BatchToLocation")

  @@map("locations")
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

enum Status {
  ToOrder
  Ordered
  Arrived
  Sold
}

enum ExpenseCategory {
  DINNER
  OFFICE_SUPPLIES
  MARKETING
  TRANSPORTATION
  UTILITIES
  RENT
  MAINTENANCE
  MISCELLANEOUS
  INCOME
}

enum Currency {
  SRD
  USD
}

// Represents business expenses and write-offs
model Expense {
  id          String          @id @default(cuid())
  description String
  amount      Float
  currency    Currency        @default(SRD)
  category    ExpenseCategory @default(MISCELLANEOUS)
  date        DateTime        @default(now())
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdById String?
  createdBy   User? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@map("expenses")
}

// Represents one item in the inventory
// BATCH SYSTEM: Items and Batches are synchronized
// quantityInStock = SUM of all batch quantities for this item
model Item {
  id                  String   @id @default(cuid())
  name                String
  
  // BATCH SYSTEM: Enabled by default - all items use batches
  useBatchSystem      Boolean  @default(true)
  
  // BASE PRODUCT INFO (used by both systems)
  costPerUnitUSD      Float    // Base/standard cost per unit
  sellingPriceSRD     Float    // Standard selling price
  supplier            String?  // Where the item is ordered from
  supplierSku         String?  // Supplier's product SKU/code
  profitMarginPercent Float?   // Profit margin percentage
  minStockLevel       Int?     // Minimum stock level for reorder alerts
  notes               String?  // Optional notes about the item
  
  // SYNCHRONIZED COLUMNS (auto-calculated from batches)
  // IMPORTANT: These are kept in sync with batch data via middleware
  // For batch-system items: quantityInStock = SUM(batch.quantity)
  status              Status?   @default(ToOrder)
  quantityInStock     Int?      @default(0) // Auto-synced from batches
  freightCostUSD      Float?    @default(0)
  orderDate           DateTime?
  expectedArrival     DateTime?
  orderNumber         String?
  assignedUserId      String?  // For non-batch items compatibility
  locationId          String?  // For non-batch items compatibility
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // OLD system relations (preserved)
  assignedUser User?     @relation("ItemToUser", fields: [assignedUserId], references: [id], onDelete: SetNull)
  location     Location? @relation("ItemToLocation", fields: [locationId], references: [id], onDelete: SetNull)
  
  // NEW system: Multiple batches per item
  batches StockBatch[] @relation("ItemBatches")

  @@map("items")
}

// Represents a batch/lot of items with specific status and location
// NEW: Enables multi-location and multi-status inventory tracking
model StockBatch {
  id                String   @id @default(cuid())
  quantity          Int      @default(0)
  status            Status   @default(ToOrder)
  costPerUnitUSD    Float    // Cost for this specific batch
  freightCostUSD    Float    @default(0) // Freight cost for this batch
  orderDate         DateTime? // When this batch was ordered
  expectedArrival   DateTime? // Expected arrival date for this batch
  orderNumber       String?  // Order number or reference
  arrivedDate       DateTime? // When this batch actually arrived
  notes             String?  // Batch-specific notes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  itemId String
  item   Item @relation("ItemBatches", fields: [itemId], references: [id], onDelete: Cascade)
  
  locationId String?
  location   Location? @relation("BatchToLocation", fields: [locationId], references: [id], onDelete: SetNull)
  
  assignedUserId String?
  assignedUser   User? @relation("BatchToUser", fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@map("stock_batches")
}